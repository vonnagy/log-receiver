
container {

  http {
    interface = "0.0.0.0"
    port = ${PORT}

    cidr {
      # This is a list of IP ranges to allow through. Can be empty.
      allow = []
      # This is a list of IP ranges to specifically deny access. Can be empty.
      deny = []
    }
  }

  metrics {
    # These are the metrics reporters
    reporters {
      Slf4j {
        # The name of the reporter class
        class = "com.github.vonnagy.service.container.metrics.reporting.Slf4jReporter"
        # Is the reporter enabled
        enabled = on
        # What is the interval to report on
        reporting-interval = 60s
        # What is the logger
        logger = "com.github.vonnagy.service.container.metrics"
      }
    }
  }
}

akka {
  loglevel = ${LOG_LEVEL}

  processor-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = ${PROCESSOR_MAX_PARALLEL}
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = ${PROCESSOR_THROUGHPUT}
  }
}


log {
  processors {
    default {
      # The name of the processor class
      class = "logreceiver.processor.NullProcessor"
      # Is the processor enabled
      enabled = off
    }
    kinesis {
      # The name of the processor class
      class = "logreceiver.processor.kinesis.KinesisProcessor"
      # Is the processor enabled
      enabled = on
      # The access key
      access-key = ${AWS_KEY}
      # The secret
      access-secret = ${AWS_SECRET}
      # The AWS endpoint to use
      endpoint = "https://kinesis.us-west-2.amazonaws.com"
      # Connection timeout
      timeout = 2s
      # Initial shard sizes
      streams {
        creation-retries = 5
        activate-timout = 60s

        log-stream {
          shards = ${LOG_STREAM_SHARD_SIZE}
        }
      }
    }
  }
}